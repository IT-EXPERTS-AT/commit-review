name: Commit Review

on:
  push:
    branches:
      - main

env:
  REMOTE: origin
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # parse:
  #   runs-on: ubuntu-latest
  #   env:
  #     REVIEWERS_FILE: reviewers.json
  #   outputs:
  #     reviewersJSON: ${{ steps.parse_reviewers.outputs.reviewersJSON }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     # https://stackoverflow.com/questions/61919141/read-json-file-in-github-actions
  #     - name: Parse Reviewers
  #       id: parse_reviewers
  #       run: |
  #         content=`cat ${{ env.REVIEWERS_FILE }}`
  #         # the following lines are only required for multi line json
  #         content="${content//'%'/'%25'}"
  #         content="${content//$'\n'/'%0A'}"
  #         content="${content//$'\r'/'%0D'}"
  #         # end of optional handling for multi line json
  #         echo "::set-output name=reviewersJSON::$content"

  check:
    runs-on: ubuntu-latest
    # needs: parse
    strategy:
      matrix:
        keyword: ["IMS myin-itex", "DynamoDB myin-itex"]
    steps:
      - uses: actions/checkout@v3
        with:
          # checkout full tree
          fetch-depth: 0

      - name: Check commit
        run: |
          KEYWORD_SPLIT=(${{matrix.keyword}})
          KEYWORD="${KEYWORD_SPLIT[0]}"
          REVIEWERS="${KEYWORD_SPLIT[1]}"

          # For each new commit pushed
          for COMMIT in $(git rev-list ${{ github.event.before }}..${{ github.event.after }}); do
            echo "checking commit $COMMIT"

            # github actions cannot create a PR to change workflow files
            if git diff -U0 $COMMIT~1 $COMMIT ':(exclude).github/' | grep -E "^\+.*$KEYWORD.*"; then
              echo "Contains keyword $KEYWORD"

              PR_OUTPUT="$(gh api /repos/${{ github.repository }}/commits/$COMMIT/pulls)"
              if [[ $(echo $PR_OUTPUT | jq 'length') -eq 0 ]]; then
                echo "Creating PR for $COMMIT"

                BASE_BRANCH="commit-review-$COMMIT-$KEYWORD-base"
                TARGET_BRANCH="commit-review-$COMMIT-$KEYWORD-target"

                git checkout -b $BASE_BRANCH $COMMIT~1
                git push --set-upstream $REMOTE $BASE_BRANCH

                git checkout -b $TARGET_BRANCH $COMMIT
                git push --set-upstream $REMOTE $TARGET_BRANCH

                gh pr create --title "Review: \"$KEYWORD\" has been used here" \
                --body "Please check if this change is safe" \
                --reviewer $REVIEWERS \
                --base $BASE_BRANCH \
                --head $TARGET_BRANCH
              else
                echo "Commit has existing PR"

                # Only consider merge commit
                PR_NUMBER=$(echo $PR_OUTPUT | jq ".[] | select(.merge_commit_sha | test(\"$COMMIT\")) | .number")
                if [[ ! -z $PR_NUMBER ]]; then
                  echo "Checking PR $PR_NUMBER for reviewers"

                  EXPECTED_REVIEWERS=($(echo $REVIEWERS | sed 's/,/ /'))
                  REVIEWS="$(gh api /repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews)"
                  REVIEWED=$(echo $REVIEWS | jq '.[].user.login')

                  MISSING_REVIEWERS=""
                  for REVIEWER in ${EXPECTED_REVIEWERS[@]}; do
                    if [[ -z $(echo $REVIEWED | grep $REVIEWER) ]]; then
                      MISSING_REVIEWERS="$MISSING_REVIEWERS $REVIEWER"
                    fi
                  done

                  if [[ ! -z $MISSING_REVIEWERS ]]; then
                    # TODO: handle multiple cases
                    echo "::set-output name=missingReviewers::$MISSING_REVIEWERS"
                    echo "::set-output name=failedCommit::$COMMIT"
                    echo $MISSING_REVIEWERS
                  do
                fi
              fi
            fi
          done
